/*
 ============================================================================
 Name        : image_fir.c
 Author      : Milica Stojiljkovic and Marko Kostic
 Version     : 1.0
 Description :
 Date        : 16.1.2016.
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <assert.h>
#include <stddef.h>
#include <string.h>
#include "altera_avalon_performance_counter.h"
#include "alt_types.h"
#include "system.h"
#include "sys/alt_cache.h"
#include "image_fir.h"

void init_coef_from_file(coeficients_t *coef, const char *file_name) {
	FILE *fd = NULL;
	fd = fopen(file_name, "rb");
	assert(fd != NULL);
	coef->order = NUM_COEF;
	coef->size = coef->order * coef->order;
	coef->pixels = (int16_t *) malloc(coef->size * sizeof(int16_t));
	fread(coef->pixels, sizeof(int16_t), coef->size, fd);
	fclose(fd);

}

void init_image_from_file(input_image_t *image, const char *file_name) {
	FILE *fd = NULL;
	fd = fopen(file_name, "rb");
	assert(fd != NULL);
	fread(&(image->width), sizeof(uint8_t), 4, fd);
	fread(&(image->height), sizeof(uint8_t), 4, fd);
	image->size = image->width * image->height;
	image->pixels = (uint8_t *) malloc(image->size * sizeof(uint8_t));
	fread(image->pixels, sizeof(uint8_t), image->size, fd);
	fclose(fd);
}

void init_input_image(input_image_t *image, uint32_t width, uint32_t height) {

	image->width = width;
	image->height = height;
	image->size = image->width * image->height;
	image->pixels = (uint8_t *) malloc(image->size * sizeof(uint8_t));
	memset(image->pixels, 0, image->size);
}

void init_output_image(output_image_t *image, uint32_t width, uint32_t height) {

	image->width = width;
	image->height = height;
	image->size = image->width * image->height;
	image->pixels = (int16_t *) malloc(image->size * sizeof(int16_t));
	memset(image->pixels, 0, image->size);
}

uint8_t *get_input_pixel(input_image_t *image, uint16_t row, uint16_t column) {

	return &(image->pixels[row * image->width + column]);

}

int16_t *get_output_pixel(output_image_t *image, uint16_t row, uint16_t column) {

	return &image->pixels[row * image->width + column];

}

int16_t *get_coef(coeficients_t *coef, uint16_t row, uint16_t column) {

	return &coef->pixels[row * coef->order + column];

}

void copy_row(input_image_t *image, uint16_t dest, uint16_t src) {

//	int i;
//	for ( i = 0; i < image->width; ++i){
//		*get_pixel(image, dest, i) = *get_pixel(image, src, i);
//	}
	uint8_t *dest_ptr = get_input_pixel(image, dest, 0);
	uint8_t *src_ptr = get_input_pixel(image, src, 0);
	memcpy((void*) dest_ptr, (void*) src_ptr, image->width);

}

void copy_column(input_image_t *image, uint16_t dest, uint16_t src) {

	int i;
	for (i = 0; i < image->height; ++i) {
		*get_input_pixel(image, i, dest) = *get_input_pixel(image, i, src);
	}

}

void copy_block(input_image_t *dest, input_image_t *src, uint16_t row,
		uint16_t column) {

	assert((row + src->height) < dest->height);
	assert((column + src->width) < dest->width);
	int i;
	for (i = 0; i < src->height; ++i) {
		uint8_t *dest_ptr = get_input_pixel(dest, row + i, column);
		uint8_t *src_ptr = get_input_pixel(src, i, 0);
		memcpy((void*) dest_ptr, (void*) src_ptr, src->width);
	}

}

void expand_image(input_image_t *image, uint8_t n) {

	assert((n < (image->height / 2)) || (n < (image->width / 2)));
	int i;
	for (i = 1; i < n + 1; i++) {
		copy_row(image, n - i, n);
		copy_row(image, image->height - n - 1 + i, image->height - n - 1);
		copy_column(image, n - i, n);
		copy_column(image, image->width - n - 1 + i, image->width - n - 1);
	}

}

void write_image_to_file(output_image_t *image, uint32_t width, uint32_t height) {
	FILE *fd = NULL;
	fd = fopen("output_image.bin", "wb");
	assert(fd != NULL);
	//int32_t tmp = -4;
	fwrite((void*) &width, sizeof(uint8_t), 4, fd);
	//tmp = 2;
	fwrite((void*) &height, sizeof(uint8_t), 4, fd);
	fwrite((void*) image->pixels, sizeof(int16_t), image->size, fd);
	fflush(fd);
	fclose(fd);

}

void fir_filter(input_image_t *in_image, output_image_t *out_image,
		coeficients_t *coef, uint8_t n) {

	int32_t out_pixel, src_pixel, coef_pixel;
	int16_t *dest_pixel_ptr;
	uint16_t x, y, i, j;

	for (x = n; x < in_image->height - n; ++x) {
		for (y = n; y < in_image->width - n; ++y) {
			out_pixel = 0;
			for (i = 0; i < coef->order; ++i) {
				for (j = 0; j < coef->order; ++j) {
					uint8_t tmp1;
					int16_t tmp2;
					tmp1 = *get_input_pixel(in_image, i + x - n, j + y - n);
					src_pixel = (int32_t) tmp1;
					tmp2 = *(get_coef(coef, i, j));
					coef_pixel = (int32_t) tmp2;
					out_pixel += src_pixel * coef_pixel;
				}
			}
			out_pixel = out_pixel >> 6;
			if (out_pixel >= 32768)
				out_pixel = 32768 - 1;
			else if (out_pixel < (-32768))
				out_pixel = -32768;
			dest_pixel_ptr = get_output_pixel(out_image, x - n, y - n);
			*dest_pixel_ptr = (int16_t) out_pixel;
		}
	}

}

int main(void) {
	while (1) {

		coeficients_t coef;
		char coef_file_name[50];
		char coef_file_name_full[] = "/mnt/host/";

		printf("Give the name of the bin file with coeficients:\n");
		fflush( stdout);
		scanf("%s", coef_file_name);
		strcat(coef_file_name_full, coef_file_name);

		PERF_RESET(PERFORMANCE_COUNTER_BASE);
		PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 1);

		init_coef_from_file(&coef, coef_file_name_full);

		PERF_END(PERFORMANCE_COUNTER_BASE, 1);

		int i = 0;
		for (i = 0; i < 49; ++i)
			printf("%d\n", coef.pixels[i]);

		input_image_t in_image;
		char image_file_name[50];
		char image_file_name_full = "/mnt/host/";

		printf("Give the name of the bin file with image pixels:\n");
		fflush( stdout);
		scanf("%s", image_file_name);
		strcat(image_file_name_full, image_file_name);

		PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 2);
		init_image_from_file(&in_image, image_file_name_full);
		printf("Width: %d, Height: %d\n", in_image.width, in_image.height);
		input_image_t exp_image;
		init_input_image(&exp_image, in_image.width + 6, in_image.height + 6);
		printf("Width: %d, Height: %d\n", exp_image.width, exp_image.height);
		copy_block(&exp_image, &in_image, 3, 3);
		expand_image(&exp_image, 3);
		free(in_image.pixels);
		output_image_t out_image;
		init_output_image(&out_image, in_image.width, in_image.height);
		fir_filter(&exp_image, &out_image, &coef, 3);
		write_image_to_file(&out_image, in_image.width, in_image.height);
		printf("Image processing finished.");
		free(exp_image.pixels);
		free(out_image.pixels);
		free(coef.pixels);
	}
}

